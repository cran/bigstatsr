% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FBM.R
\docType{class}
\name{FBM-class}
\alias{FBM-class}
\alias{FBM_RC}
\alias{FBM}
\alias{as_FBM}
\title{Class FBM}
\usage{
FBM(nrow, ncol, type = c("double", "integer", "unsigned short",
  "unsigned char", "raw"), init = NULL, backingfile = tempfile(),
  create_bk = TRUE)

as_FBM(x, type = c("double", "integer", "unsigned short",
  "unsigned char", "raw"), backingfile = tempfile())
}
\arguments{
\item{nrow}{Number of rows.}

\item{ncol}{Number of columns.}

\item{type}{Type of the Filebacked Big Matrix (default is \code{double}). Either
\itemize{
\item \code{"double"}
\item \code{"integer"}
\item \code{"unsigned short"}: can store integer values from 0 to 65535.
It has vocation to become the basis for a \code{FBM.code65536} class for
accessing strings.
\item \code{"raw"} or \code{"unsigned char"}: can store integer values from 0 to 255.
It is the basis for the \link[=FBM.code256-class]{FBM.code256} class for
accessing 256 arbitrary different numeric values.
It is used in \href{https://goo.gl/pHCCmo}{package bigsnpr}.
}}

\item{init}{Either a single value (e.g. \code{0}) or as many value as the number
of elements of the FBM. \strong{Default doesn't initialize the matrix.}}

\item{backingfile}{Path to the file storing the Big Matrix on disk.
An extension ".bk" will be automatically added. Default stores in the
temporary directory.}

\item{create_bk}{Create a backingfile (the default) or use an existing one
(which should be named by the \code{backingfile} parameter and have an
extension ".bk"). For example, this could be used to convert a filebacked
\code{big.matrix} from package \strong{bigmemory} to a \link[=FBM-class]{FBM}.}

\item{x}{A matrix or an data frame (2-dimensional data).}
}
\description{
A reference class for storing and accessing matrix-like data stored in files
on disk. This is very similar to Filebacked Big Matrices provided by the
\strong{bigmemory} package. Yet, the implementation is lighter.

Convert a matrix (or a data frame) to an FBM.
}
\details{
An FBM object has many field:
\itemize{
\item \code{$address}: address of the external pointer containing the underlying
C++ object, to be used as a \code{XPtr<FBM>} in C++ code
\item \code{$extptr}: use \code{$address} instead
\item \code{$nrow}
\item \code{$ncol}
\item \code{$type}
\item \code{$backingfile} or \code{$bk}: File with extension 'bk' that stores the numeric
data of the FBM
\item \code{$rds}: 'rds' file (that may not exist) corresponding to the 'bk' file
\item \code{$is_saved}: whether this object stored in \code{$rds}?
}

And two methods:
\itemize{
\item \code{$save()}: Save the FBM object in \code{$rds}. Returns the FBM.
\item \code{add_columns(<ncol_add>)}: Add some columns to the FBM by appending the
backingfile with some data. Returns the FBM invisibly.
}
}

\examples{
X <- FBM(10, 10)
typeof(X)
X[] <- rnorm(length(X))
X[, 1:6]
X[] <- 1:100
X[, 1]
X[1, ]  # not recommended for large matrices
X[, -1]
X[, c(TRUE, FALSE)]
X[cbind(1:10, 1:10)] <- NA_real_
X[]

X <- FBM(150, 5)
X[] <- iris   ## you can replace with a df (factors -> integers)
X2 <- as_FBM(iris)
identical(X[], X2[])
}
\seealso{
\link{big_copy}
}
